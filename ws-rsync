#!/usr/bin/env bash

ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
CUR_WORK_DIR=$(pwd)
ProgName=$(basename $0)

DEFAULT_DIFF_TIME=3
DEFAULT_CONFIG_FILE_NAME=".ws-rsync.yml"

# Default command line arguments
VERBOSE="verbose"
PORT=
MY_NAME=${ProgName}
timeout=5

if [[ -z ${EDITOR} ]];then
    EDITOR=vi
fi

logdebug() {
	# Only log to stdout when verbose is turned on
	if [[ "${VERBOSE}" = "debug" ]]; then
		echo "$(date +'%Y-%m-%d %H:%M:%S') ${MY_NAME}: [DEBUG] ${*}"
	fi
}

logmsg() {
	# Only log to stdout when verbose/debug is turned on
	if [[ "${VERBOSE}" = "verbose" ]] || [[ "${VERBOSE}" = "debug" ]]; then
		echo "$(date +'%Y-%m-%d %H:%M:%S') ${MY_NAME}: [INFO]  ${*}"
	fi
}

logerr() {
	echo "$(date +'%Y-%m-%d %H:%M:%S') ${MY_NAME}: [ERROR] ${*}" >&2
}

function usage
{
    echo "basically, workspace-rsync will create .config_<name-of-workspace-dir> in your $HOME when you run the utility with out any confile
          then the tool will check whether or not the configure in $HOME then it will auto apply the configure"

    echo "usage: ws-rsync init : initial ws-rsync"
    echo "usage: ws-rsync pull : pull down all data in remote to remote at current dir"
    echo "usage: ws-rsync push : push up all data in  local to remote at current dir"
    echo "usage: ws-rsync download <remote:file/dir>: sync file/dir from local to the dir in remote"
    echo "usage: ws-rsync download_to <remote:file/dir-src> <local:dest> Donwload file/dir to local des"
    echo "usage: ws-rsync upload <local:file/dir> replace file/dir at local to the same in remote"
    echo "usage: ws-rsync upload_to <local:abs/relative-file/dir> <remote:abs-dest> upload a file from local to remote"
    echo "usage: ws-rsync call <remote:command>"
    echo "usage: ws-rsync start"
    echo "-h | --help             : Help";
}

function parse_yaml_config {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function dump_config()
{
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -f ${ws_cfg_file} ]];then
        cat ${ws_cfg_file}
    fi
}

function is_tracked_by_git(){
    dir=$1
    file=$2
    pushd ${dir} > /dev/null 2>&1
    inside_git_repo="$(git rev-parse --is-inside-work-tree ${dir} 2>/dev/null)"
    if [[ "$inside_git_repo" ]]; then
        git check-ignore "${dir}/${file}" >/dev/null 2>&1
        echo $?
    else
        echo 0
    fi
    popd > /dev/null 2>&1
}

################################################################
# The logic here:
# inotifywait check the file change. If there have not any change need to sync
# for long time. 1 hour from the latest sync. Suppose that we go down now
# let shutdown the remote to costing down. But the monitor still on the track.
# If there have a change after that. the daemon will turn on the remote.
# re-update the authenticate information using hook command/script.
# the daemon also monitor or check the remote side. If there have
# any issue with remote. The daemon will run the hook-self-repair to bring it back
################################################################
function watch_dir_inotify(){
    watch_dir=$1
    #TODO add timeout here. After 1 hour with no sync up, then terminate the remote
    # then restart inotify again.
    # if there have a new change. Bringe the remote back, double check the credentials
    # re-update credentials if there have change.
    logmsg "Starting inotifywait: Monitor $watch_dir, timeout 3600 seconds"
    inotifywait -mr \
                --format '%e %w %f' \
                -e close_write \
                --exclude '/\.' \
                --exclude '/\.git' \
                --exclude='*~' \
                --exclude='.*.swp' \
                ${watch_dir} | {

        previous_SECONDS=0
        previous_event=
        while read event dir file ;
        do
               ret=$(is_tracked_by_git ${dir} ${file})
               if [[ ${ret} ]]; then
                   logmsg "$file - START"
                   rsync_files_to_remote ${dir}${file}  >/dev/null 2>&1
                   logmsg "$file - SUCCESS"
               else
                   echo "ignored update $file"
               fi
#               if [[ "$event" = "$previous_event" && $SECONDS <= ${previous_SECONDS} + 3600 ]]; then
#                  continue
#               fi
#               previous_SECONDS=$SECONDS previous_event=${event}
        done
    # TODO: timeout let update status of remote instance
    }
}

function rsync_execute(){
    src=$1
    des=$2
    force_sync=$3
    no_relative=$4

    SSH_OPTS="ssh -T -o Compression=no -x"
    RSYNC_CMD="rsync -aHAXx --numeric-ids --progress --exclude=.git/ --exclude=*~"

    if [[ -f ${wsConfig_local_dir}/.gitignore ]]; then
        if [[ -z "$force_sync" || ${force_sync} == false ]]; then
            RSYNC_CMD="$RSYNC_CMD --exclude-from='${wsConfig_local_dir}/.gitignore'"
        fi
    fi
    if [[ ! -z ${connection_sudo} ]];then
        RSYNC_CMD="$RSYNC_CMD --rsync-path=\"sudo rsync\""
    fi

    if [[ -z ${no_relative} ]];then
        RSYNC_CMD="$RSYNC_CMD --relative"
    fi

    # SSH OPTIONS
    if [[ ! -z ${connection_ssh_port} ]]; then
       SSH_OPTS="$SSH_OPTS -p ${connection_ssh_port}"
    fi

    # if connection_ssh_pass is used, then use ssh pass as authenticate method
    if [[ ! -z ${connection_ssh_pass} ]];then
        SSHPASS_CMD="sshpass -p$connection_ssh_pass"
        RSYNC_CMD="${SSHPASS_CMD} ${RSYNC_CMD} -e \"$SSH_OPTS\""
    else #otherwise, use ssh private key or non authenticate
        if [[ ! -z ${connection_ssh_key} ]]; then
            SSH_OPTS="${SSH_OPTS} -i $connection_ssh_key"
            RSYNC_CMD="${RSYNC_CMD} -e \"$SSH_OPTS\""
        else
            # Work around for ":" if non ssh
            src=$(echo "$src" | tr ":" " ")
            des=$(echo "$des" | tr ":" " ")
        fi
    fi

    RSYNC_CMD="$RSYNC_CMD $src $des"
    rsync_execute_cmd=$(printf "%q " ${RSYNC_CMD};echo)
    printf "${rsync_execute_cmd}" | bash
}

function rsync_files_to_remote(){
    changed_file=$1

    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} ${changed_file})
    local_file_dirpath=$(dirname "$local_realpath")

    src=${wsConfig_local_dir}/./${local_realpath}
    des=${connection_ssh_acc}:"${wsConfig_remote_dir}"
    rsync_execute ${src} ${des} &
    return
}

function watch_dir() {
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    eval $(parse_yaml_config ${ws_cfg_file})

    if [[ -z "${connection_diff_time}" ]];then
        connection_diff_time=3
    fi
    abs_local_dir=$(echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")")
    echo watching folder ${abs_local_dir} every ${connection_diff_time} secs.

    while [[ true ]]
    do
        files=`find ${abs_local_dir} -type f -newermt "$connection_diff_time seconds ago"`
        if [[ ${files} != "" ]] ; then
            rsync_files_to_remote ${files} &
        fi
        sleep ${connection_diff_time}
    done
}

get_ws_config_file() {
    echo "value of $1" >> /tmp/ws-rsync.log
    ABS_DIR_PATH=$1
    config_file="${ABS_DIR_PATH}/.ws-rsync.yml"

    if [[ ${ABS_DIR_PATH} = "/" ]]; then
        logerr "Not found configure file recursively"
        exit -1
    fi
    if [[ -f ${config_file} ]]; then
        echo ${config_file}
    else
        ret=$(get_ws_config_file $(dirname ${ABS_DIR_PATH}))
        echo ${ret}
    fi
    return
}

function get_ws_config(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    echo "Configure file is: $ws_cfg_file"
    if [[ ! -f "$ws_cfg_file" ]]; then
        echo 0
    fi
    . "${ws_cfg_file}"
    return 1
}

function validate_ssh_connection(){
    temp=""
    if [[ ! -z ${connection_ssh_pass} ]];then
        logmsg "validating ssh connection for ${connection_ssh_acc}"
        sshpass -p${connection_ssh_pass} ssh -o ConnectTimeout=${timeout} -p ${connection_ssh_port} ${connection_ssh_acc} exit
        if [[ $? == 255 || $? == 124 ]];then
            logerr "ssh connection is not active or timeout"
            read -r "Press any key to continue or Ctrl-C to exit:" temp
        else
            logmsg "ssh connection is active"
            return
        fi
    fi

    if [[ ! -z ${connection_ssh_key} ]];then
        logmsg "validating ssh connection for ${connection_ssh_acc}"
        ssh -o ConnectTimeout=${timeout} -p ${connection_ssh_port} -q -i ${connection_ssh_key} ${connection_ssh_acc} exit
        if [[ $? == 255 ]];then
            logerr "ssh connection is not active or timeout"
            exit -1
        else
            logmsg "ssh connection is active"
            return
        fi
    fi
}

function validate_ws_config(){
    connection_ssh_port=22
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    eval $(parse_yaml_config ${ws_cfg_file})
    temp=""
    if [[ ! -d ${wsConfig_local_dir} ]]; then
        logerr "Warmning look like $wsConfig_local_dir is not existed"
        read -r 'Press any key to continue or Ctrl-C to exit:' temp
        echo "create $wsConfig_local_dir"
        mkdir -p ${wsConfig_local_dir}
    fi
    validate_ssh_connection
    return
}

function validate_bool_input(){
    input="${1^^}" # capitalized input
    if [[ "${input}" == "NO" ]];then
        echo 0
    elif [[ "${input}" == "YES" ]];then
        echo 1
    else
        echo -1
    fi
}

function input_ssh_authenticate(){
    read -p 'Using private key to authenticate,default Yes (yes/no)': auth_private_key
    if [[ -z "${auth_private_key}" ]]; then
        auth_private_key="yes"
    fi
    auth_private_key=$(validate_bool_input ${auth_private_key})
    if [[ ${auth_private_key} == -1 ]]; then
        echo "Error on options using private key or not"
        auth_private_key=1
    fi
    if [[ ${auth_private_key} == 1 ]]; then
         read -p 'Enter your ssh private key:' connection_ssh_key
    else
        read -sp 'Enter your ssh password: \n' connection_ssh_pass
    fi
    read -p 'Enter your ssh port (Enter for default: 22) :' connection_ssh_port
    if [[ -z ${connection_ssh_port} || $((connection_ssh_port)) != ${connection_ssh_port} ]];then
        connection_ssh_port=22
    fi
}
get_ws_config_file_path() {
    ABS_DIR_PATH=${CUR_WORK_DIR}
    MD5_CUR_DIR=$(echo -n ${ABS_DIR_PATH} | md5sum | awk '{print $1}')
    ws_cfg_file="$HOME/.ws-rsync/config_${MD5_CUR_DIR}"
    echo ${ws_cfg_file}
}

function run_init(){
    logmsg "run_init"
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        logerr: "error on get configure file"
    else
        logerr "already have ws-config at $ws_cfg_file"
        read -n1 -r -p "Press space to continue init ws-rsync in $CUR_WORK_DIR ...Or Ctrl-C to abort" key
    fi
    cp /var/lib/ws-rsync/temp.yml ${CUR_WORK_DIR}/${DEFAULT_CONFIG_FILE_NAME}
    vi ${CUR_WORK_DIR}/${DEFAULT_CONFIG_FILE_NAME}
    return
}

function run_config(){
    logmsg "run_init"
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        logerr: "Could not find ws-rsync configure file at $CUR_WORK_DIR"
        logmsg: "Please using ws-rsync init to initial"
    else
        logerr "already have ws-config at $ws_cfg_file"
        config_dir_path=$(dirname ${ws_cfg_file})
        if [[ $config_dir_path != ${CUR_WORK_DIR} ]];then
            logmsg "Look like the ws-rsync config not the same dir"
            read -n1 -r -p "Press space to continue edit ws-rsync config in $config_dir_path ...Or Ctrl-C to abort" key
        fi
    fi
    ${EDITOR} ${ws_cfg_file}
    return
}

function run_remote_local_sync(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        echo "error on get configure"
        run_init
    fi
    eval $(parse_yaml_config ${ws_cfg_file})

    echo "run_action_remote_local_sync"

    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} ${CUR_WORK_DIR})

    wsConfig_remote_dirname=${wsConfig_remote_dir##*/}
    remote_parent_dir=$(dirname ${wsConfig_remote_dir})

    src=${connection_ssh_acc}:"$remote_parent_dir/${wsConfig_remote_dirname}/./$local_realpath"
    des=${wsConfig_local_dir}
    echo "sync up all data in remote $src  to local $des"
    rsync_execute ${src} ${des}
    return
}

function run_local_remote_sync(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        logerr "error on get configure"
        run_init
    fi
    eval $(parse_yaml_config ${ws_cfg_file})

    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} ${CUR_WORK_DIR})

    echo "run_action_local_remote_sync"

    src=${wsConfig_local_dir}/./${local_realpath}
    des=${connection_ssh_acc}:"${wsConfig_remote_dir}/./"
    logmsg "sync up all data in local $src  to remote $des"
    rsync_execute ${src} ${des}
    return
}

function run_force_upload(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        echo "error on get configure"
        run_init
    fi
    eval $(parse_yaml_config ${ws_cfg_file})

    validate_ws_config
    upload_entry=$1
    abs_upload_entry=$(realpath -m ${upload_entry})
    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} -m ${abs_upload_entry})

    src=${wsConfig_local_dir}/./${local_realpath}
    des=${connection_ssh_acc}:"${wsConfig_remote_dir}/"

    rsync_execute ${src} ${des} true
}

function run_force_upload_to(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        echo "error on get configure"
        run_init
    fi
    eval $(parse_yaml_config ${ws_cfg_file})
    validate_ws_config

    upload_entry=$1
    remote_des=$2

    abs_upload_entry=$(realpath -m ${upload_entry})
    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} -m ${abs_upload_entry})

#    src=${wsConfig_local_dir}/./${local_realpath}
    src=${abs_upload_entry}
    des=${connection_ssh_acc}:${remote_des}

    rsync_execute ${src} ${des} true true
}

function run_force_download(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        logerr "error on get configure Please rerun ws-rsync init"
        exit -1
    fi
    eval $(parse_yaml_config ${ws_cfg_file})
    validate_ws_config

    download_entry=$1
    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} -m ${download_entry})

    src=${connection_ssh_acc}:"${wsConfig_remote_dir}/./${local_realpath}"
    des="${wsConfig_local_dir}/./"

    rsync_execute ${src} ${des} true
}

function run_force_download_to(){
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        logerr "error on get configure Please rerun ws-rsync init"
        exit -1
    fi
    eval $(parse_yaml_config ${ws_cfg_file})
    validate_ws_config

    download_entry=$1
    download_to=$2

    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} -m ${download_entry})

    src=${connection_ssh_acc}:"${wsConfig_remote_dir}/./${local_realpath}"
    des="${download_to}/./"

    rsync_execute ${src} ${des} true true
}

function run_start(){
    logmsg "run_start"
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ ! -f "$ws_cfg_file" ]];then
        logerr "error on get configure"
        run_init
    fi
    eval $(parse_yaml_config ${ws_cfg_file})
    validate_ws_config
    # positional args
    args=()
    # named args
    while [[ "$1" != "" ]]; do
        case "$1" in
           -d | --daemon )                   daemon=true;  shift;;
           -h | --help )                     usage;          exit;; # quit and show usage
            * )                              args+=("$1")             # if no match, add it to the positional args
        esac
        shift # move to next kv pair
    done
    # restore positional args
    set -- "${args[@]}"

    if ! [[ -x "$(command -v inotifywait)" ]]; then
        logmsg "Warmning: inotifytools is not installed"
        logmsg "Warmning: wr-sync will use pooling check per $diff_time is not installed"
        watch_dir
        exit 0
    fi
    relative_path=$(realpath --relative-to=${wsConfig_local_dir} ${CUR_WORK_DIR})
    watch_dir_inotify ${wsConfig_local_dir}/${relative_path}
    exit 0
}

function ssh_execute_cmd(){
    target_dir=$1
    shift
    cmd=$@
    SSH_CMD=
    # if connection_ssh_pass is used, then use ssh pass as authenticate method
    if [[ ! -z "${connection_ssh_acc}" ]]; then
        SSH_CMD="ssh"
        if [[ ! -z ${connection_ssh_pass} ]];then
            SSH_CMD="sshpass -p$connection_ssh_pass $SSH_CMD"
        else #otherwise, use ssh private key or non authenticate
            if [[ ! -z ${connection_ssh_key} ]]; then
                SSH_OPTS="-i $connection_ssh_key"
                SSH_CMD="${SSH_CMD} ${SSH_OPTS}"
            fi
        fi

        if [[ ! -z ${connection_ssh_port} ]];then
            SSH_CMD="$SSH_CMD -p $connection_ssh_port"
        fi
        SSH_CMD="$SSH_CMD $connection_ssh_acc"
    else
        echo "not existed connection_ssh_acc, assume run in local"
    fi
    echo "${SSH_CMD} \"cd ${target_dir} ; $cmd\"" |bash
}

function run_remote(){
    echo "run remote $@"
    cmd="$@"
    ws_cfg_file=$(get_ws_config_file ${CUR_WORK_DIR})
    if [[ -z "$ws_cfg_file" ]];then
        echo "error on get configure"
        echo "please rerun ws-rsync init"
        exit -1
    fi
    eval $(parse_yaml_config ${ws_cfg_file})
    validate_ws_config
    local_realpath=$(realpath --relative-to=${wsConfig_local_dir} -m ${CUR_WORK_DIR})
    remote_dir=${wsConfig_remote_dir}/./${local_realpath}
    ssh_execute_cmd ${remote_dir} ${cmd}
}

# ws-rsync.sh init : you will run the initial steps for the current workspace dir"
# run the command bellow to update your configure which already done in initial step
# ws-rsync.sh config --ssh kevin@exampleserver --ssh-key $HOME/.ssh/examplekey ...
# After inital/configue then can use the script to run some action
# by default, the script will run the default action monitoring and sync the workspace
# with daemon options, then script will run in background for example
# ws-rsync.sh start --daemon  : workspace-rsync will monitor your configured workspace
# ws-rsync.sh stop : workspace-rsync will monitor your configured workspace
# when we think that remote side is latest version, then we need to sync up with remote site. In this case, that we will
# download the newer files from remote workspace
# ws-rsync.sh run remote-local-sync : run a sync up from local to remote: rsync download newer from remote to local/ scp download-replace everything from remote to local
# when we think that local side is latest version, then we need to update the newer files to remote workspace
# ws-rsync.sh run local-remote-sync : run a sync up from local to remote: rync  upload the newer from local to remote....
function run
{
    subcommand=$1
    action=$2
    case ${subcommand} in
    "" | "-h" | "--help")
        usage
        exit 0
        ;;
    "" | "init" )
        shift
        run_init
        exit 0
        ;;

    "" | "config" )
        shift
        run_config
        exit 0
        ;;

    "" | "start" )
        shift
        run_start $@
        exit 0
        ;;
    "" | "download" )
        shift
        run_force_download $@
        exit 0
        ;;

     "" | "download_to" )
        shift
        run_force_download_to $@
        exit 0
        ;;
     "" | "upload" )
        shift
        run_force_upload $@
        exit 0
        ;;

     "" | "upload_to" )
        shift
        run_force_upload_to $@
        exit 0
        ;;
    "" | "run")
        shift
        action=$1
        shift
        echo "run action: ${subcommand}_${action} $@"
        ${subcommand}_${action} $@
        if [[ $? = 127 ]]; then
                echo "Error: '$subcommand' is not a known subcommand." >&2
                echo "     Run '$ProgName --help' for a list of known subcommands." >&2
                exit 1
            fi
        ;;
    "" | "call")
        shift
        echo "run command $@ remote"
        run_remote $@
    ;;
    *)
        echo "Error: '$subcommand' is not a known subcommand." >&2
        echo "       Run '$ProgName --help' for a list of known subcommands." >&2
        exit 1
        ;;
esac
}

run "$@";
